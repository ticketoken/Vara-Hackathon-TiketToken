// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct TrafficLight<R> {
    remoting: R,
}
impl<R> TrafficLight<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::TrafficLight for TrafficLight<R> {
    type Args = R::Args;
    fn issue_ticket(
        &mut self,
        event_name: String,
        place: String,
        date: String,
        price: u64,
    ) -> impl Call<Output = TicketEvent, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::IssueTicket>::new(
            self.remoting.clone(),
            (event_name, place, date, price),
        )
    }
    fn validate_ticket(
        &mut self,
        ticket_id: u64,
    ) -> impl Call<Output = TicketEvent, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::ValidateTicket>::new(
            self.remoting.clone(),
            ticket_id,
        )
    }
    fn query_ticket(
        &self,
        ticket_id: u64,
    ) -> impl Query<Output = Option<IoTicketState>, Args = R::Args> {
        RemotingAction::<_, traffic_light::io::QueryTicket>::new(self.remoting.clone(), ticket_id)
    }
}

pub mod traffic_light {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct IssueTicket(());
        impl IssueTicket {
            #[allow(dead_code)]
            pub fn encode_call(
                event_name: String,
                place: String,
                date: String,
                price: u64,
            ) -> Vec<u8> {
                <IssueTicket as ActionIo>::encode_call(&(event_name, place, date, price))
            }
        }
        impl ActionIo for IssueTicket {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 44, 73, 115, 115, 117,
                101, 84, 105, 99, 107, 101, 116,
            ];
            type Params = (String, String, String, u64);
            type Reply = super::TicketEvent;
        }
        pub struct ValidateTicket(());
        impl ValidateTicket {
            #[allow(dead_code)]
            pub fn encode_call(ticket_id: u64) -> Vec<u8> {
                <ValidateTicket as ActionIo>::encode_call(&ticket_id)
            }
        }
        impl ActionIo for ValidateTicket {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 56, 86, 97, 108, 105,
                100, 97, 116, 101, 84, 105, 99, 107, 101, 116,
            ];
            type Params = u64;
            type Reply = super::TicketEvent;
        }
        pub struct QueryTicket(());
        impl QueryTicket {
            #[allow(dead_code)]
            pub fn encode_call(ticket_id: u64) -> Vec<u8> {
                <QueryTicket as ActionIo>::encode_call(&ticket_id)
            }
        }
        impl ActionIo for QueryTicket {
            const ROUTE: &'static [u8] = &[
                48, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 44, 81, 117, 101, 114,
                121, 84, 105, 99, 107, 101, 116,
            ];
            type Params = u64;
            type Reply = Option<super::IoTicketState>;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum TicketEvent {
    Issued(Ticket),
    Validated(u64),
    NotFound,
    Invalid,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct Ticket {
    pub id: u64,
    pub event_name: String,
    pub place: String,
    pub date: String,
    pub price: u64,
    pub used: bool,
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct IoTicketState {
    pub id: u64,
    pub event_name: String,
    pub place: String,
    pub date: String,
    pub price: u64,
    pub used: bool,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait TrafficLight {
        type Args;
        fn issue_ticket(
            &mut self,
            event_name: String,
            place: String,
            date: String,
            price: u64,
        ) -> impl Call<Output = TicketEvent, Args = Self::Args>;
        fn validate_ticket(
            &mut self,
            ticket_id: u64,
        ) -> impl Call<Output = TicketEvent, Args = Self::Args>;
        fn query_ticket(
            &self,
            ticket_id: u64,
        ) -> impl Query<Output = Option<IoTicketState>, Args = Self::Args>;
    }
}
